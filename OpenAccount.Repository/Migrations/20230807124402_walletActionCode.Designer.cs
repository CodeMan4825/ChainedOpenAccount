// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OpenAccount.Repository.Infrastructure;

#nullable disable

namespace OpenAccount.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230807124402_walletActionCode")]
    partial class walletActionCode
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OpenAccount.Entities.Accounts.AccountTypeSetting", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasComment("تنظیمات هر نوع حساب");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("AccountGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("گروه حساب");

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint")
                        .HasComment("نوع حساب");

                    b.Property<string>("AccountTypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شرح نوع حساب");

                    b.Property<long>("IdentificationInquiry")
                        .HasColumnType("bigint")
                        .HasComment("استعلام ثبت احوال");

                    b.Property<long>("InqueryPrice")
                        .HasColumnType("bigint")
                        .HasComment("استعلام چک و تسهیلات معوق - سمات و سماچک");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("این تنظیمات برای این نوع حساب فعال است؟");

                    b.Property<long>("MinBalance")
                        .HasColumnType("bigint")
                        .HasComment("موجودی اولیه حساب");

                    b.Property<long>("PostalCodeInquiry")
                        .HasColumnType("bigint")
                        .HasComment("استعلام کد پستی");

                    b.Property<int>("Stamp")
                        .HasColumnType("int")
                        .HasComment("تمبر");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AccountTypeSetting", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            AccountGroupId = "45",
                            AccountType = (byte)0,
                            AccountTypeTitle = "کوتاه مدت",
                            IdentificationInquiry = 4500L,
                            InqueryPrice = 0L,
                            IsActive = true,
                            MinBalance = 1000000L,
                            PostalCodeInquiry = 15000L,
                            Stamp = 10000,
                            SysDate = new DateTime(2023, 8, 7, 16, 14, 2, 86, DateTimeKind.Local).AddTicks(767)
                        },
                        new
                        {
                            Id = (short)2,
                            AccountGroupId = "22",
                            AccountType = (byte)1,
                            AccountTypeTitle = "قرض الحسنه",
                            IdentificationInquiry = 4500L,
                            InqueryPrice = 0L,
                            IsActive = true,
                            MinBalance = 500000L,
                            PostalCodeInquiry = 15000L,
                            Stamp = 10000,
                            SysDate = new DateTime(2023, 8, 7, 16, 14, 2, 86, DateTimeKind.Local).AddTicks(809)
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("افتتاح حساب کاربر");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شماره حساب");

                    b.Property<string>("ShebaNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شماره شبا");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("تاریخ افتتاح حساب");

                    b.HasKey("Id");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.UserAccountLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("لاگ افتتاح حساب کاربر");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorMessages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseCode")
                        .HasColumnType("int")
                        .HasComment("Data response code");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Data response text");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TraceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("UserAccountLog", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.WalletStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("وضعیت کیف پول");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("موجودی واقعی مشتری");

                    b.Property<decimal>("NeededBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("موجودی مورد نیاز");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("تاریخ استعلام موجودی");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("WalletStatus", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("شخص حقوقی");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("شهر محل تولد / ثبت");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("تاریخ محل تولد/ثبت");

                    b.Property<string>("LatinName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام لاتین شخص");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام شخص");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کد / شناسه ملی شخص حقیقی / حقوقی");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Person", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.PersonInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("اطلاعات تکمیلی شخص حقوقی");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کدخطا در دریافت اطلاعات تکمیلی");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شرح خطا در دریافت اطلاعات تکمیلی");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("آخرین اطلاعات خوانده شده");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کدپستی");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان ثبت اطلاعات");

                    b.HasKey("Id");

                    b.ToTable("PersonInfo", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("آدرس");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام ساختمان");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("طبقه");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("آدرس کامل");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("پلاک");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("فعال است؟");

                    b.Property<int?>("LocalityCode")
                        .HasColumnType("int")
                        .HasComment("کد محله");

                    b.Property<string>("LocalityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نوع محله");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("MobileNumber");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1)
                        .HasComment("اشخاص");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("تلفن ثابت");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("تلفن ثابت");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(2)
                        .HasComment("کدپستی");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("استان");

                    b.Property<string>("SideFloor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("طبقه جانبی");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("خیابان");

                    b.Property<string>("Street2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("خیابان");

                    b.Property<string>("SubLocality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("منطقه فرعی");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان درج");

                    b.Property<string>("TownShip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شهرستان");

                    b.Property<string>("Village")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("روستا");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("منطفه - ناحیه");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("شهر");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام شهر");

                    b.Property<string>("PostCityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int")
                        .HasComment("استان");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "نامشخص",
                            PostCityCode = "0",
                            ProvinceId = 0
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Education", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasComment("تحصیلات");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("عنوان");

                    b.HasKey("Id");

                    b.ToTable("Education", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Title = "زیر دیپلم"
                        },
                        new
                        {
                            Id = (byte)2,
                            Title = "دیپلم"
                        },
                        new
                        {
                            Id = (byte)3,
                            Title = "فوق دیپلم"
                        },
                        new
                        {
                            Id = (byte)4,
                            Title = "لیسانس"
                        },
                        new
                        {
                            Id = (byte)5,
                            Title = "فوق لیسانس"
                        },
                        new
                        {
                            Id = (byte)6,
                            Title = "دکتري"
                        },
                        new
                        {
                            Id = (byte)7,
                            Title = "بالاتر از دکتري"
                        },
                        new
                        {
                            Id = (byte)8,
                            Title = "حوزوي"
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Exceptions.EntityException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Inner exception");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("پیام پارسی");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان وقوع خطا");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("کاربر باجت");

                    b.HasKey("Id");

                    b.ToTable("EntityException", null, t =>
                        {
                            t.HasComment("خطا های موجودیت");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Job", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("مشاغل");

                    b.Property<byte>("Code")
                        .HasColumnType("tinyint")
                        .HasComment("Tata Id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte>("JobCategoryId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("Job", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = (byte)1,
                            IsActive = true,
                            JobCategoryId = (byte)1,
                            Name = "کارگر ساده"
                        },
                        new
                        {
                            Id = 2,
                            Code = (byte)2,
                            IsActive = true,
                            JobCategoryId = (byte)1,
                            Name = "کارگر فنی"
                        },
                        new
                        {
                            Id = 3,
                            Code = (byte)3,
                            IsActive = true,
                            JobCategoryId = (byte)1,
                            Name = "کارمند ساده"
                        },
                        new
                        {
                            Id = 4,
                            Code = (byte)4,
                            IsActive = true,
                            JobCategoryId = (byte)1,
                            Name = "کارمند ارشد"
                        },
                        new
                        {
                            Id = 5,
                            Code = (byte)5,
                            IsActive = true,
                            JobCategoryId = (byte)1,
                            Name = "بازنشستگان و مستمري بگیرا ن"
                        },
                        new
                        {
                            Id = 6,
                            Code = (byte)1,
                            IsActive = true,
                            JobCategoryId = (byte)2,
                            Name = "جزء"
                        },
                        new
                        {
                            Id = 7,
                            Code = (byte)2,
                            IsActive = true,
                            JobCategoryId = (byte)2,
                            Name = "کل"
                        },
                        new
                        {
                            Id = 8,
                            Code = (byte)1,
                            IsActive = true,
                            JobCategoryId = (byte)3,
                            Name = "جزء"
                        },
                        new
                        {
                            Id = 9,
                            Code = (byte)2,
                            IsActive = true,
                            JobCategoryId = (byte)3,
                            Name = "کل"
                        },
                        new
                        {
                            Id = 10,
                            Code = (byte)1,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "رانندگان"
                        },
                        new
                        {
                            Id = 11,
                            Code = (byte)2,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "پزشکان و متخصصان علوم پزشکی"
                        },
                        new
                        {
                            Id = 12,
                            Code = (byte)3,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "قضات، وکلا، کارشناسان، مشاوران حقوقی"
                        },
                        new
                        {
                            Id = 13,
                            Code = (byte)4,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "صاحبان مراکز آموزشی و متخصصان آموزشی"
                        },
                        new
                        {
                            Id = 14,
                            Code = (byte)5,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "عاملان فروش و حق العمل کاران"
                        },
                        new
                        {
                            Id = 15,
                            Code = (byte)6,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "تعمیرکاران، صنعتگران و تولید کنندگان طلا"
                        },
                        new
                        {
                            Id = 16,
                            Code = (byte)7,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "هنرمندان و ورزشکاران"
                        },
                        new
                        {
                            Id = 17,
                            Code = (byte)8,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "نویسندگان"
                        },
                        new
                        {
                            Id = 18,
                            Code = (byte)9,
                            IsActive = true,
                            JobCategoryId = (byte)5,
                            Name = "خدمات مالی"
                        },
                        new
                        {
                            Id = 19,
                            Code = (byte)1,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "آژانس هاي مسافرتی"
                        },
                        new
                        {
                            Id = 20,
                            Code = (byte)2,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "پزشکان و متخصصان علوم پزشکی و پیراپزشکی"
                        },
                        new
                        {
                            Id = 21,
                            Code = (byte)3,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "قضات، وکلا، کارشناسان، مشاوران حقوقی"
                        },
                        new
                        {
                            Id = 22,
                            Code = (byte)4,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "صاحبان مراکز آموزشی و متخصصان آموزشی"
                        },
                        new
                        {
                            Id = 23,
                            Code = (byte)5,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "مشاغل ساختمانی، تاسیسات فنی و صنعتی"
                        },
                        new
                        {
                            Id = 24,
                            Code = (byte)6,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "ناشران و صاحبان موسسات انتشاراتی"
                        },
                        new
                        {
                            Id = 25,
                            Code = (byte)7,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "مهندسین مشاور، دارندگان شرکت ها و مراکز مهندسی"
                        },
                        new
                        {
                            Id = 26,
                            Code = (byte)8,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "دارندگان موسسات تبلیغاتی، مشاوران تبلیغاتی"
                        },
                        new
                        {
                            Id = 27,
                            Code = (byte)9,
                            IsActive = true,
                            JobCategoryId = (byte)6,
                            Name = "صاحبان موسسات خدماتی و آزمایشگاهی"
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.JobCategory", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasComment("گروه مشاغل");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            IsActive = true,
                            Name = "حقوق بگیر"
                        },
                        new
                        {
                            Id = (byte)2,
                            IsActive = true,
                            Name = "تولید کنندگان"
                        },
                        new
                        {
                            Id = (byte)3,
                            IsActive = true,
                            Name = "خرید و فروش - صادر کنندگان و وارد کنندگان"
                        },
                        new
                        {
                            Id = (byte)4,
                            IsActive = false,
                            Name = "نیروهاي مسلح"
                        },
                        new
                        {
                            Id = (byte)5,
                            IsActive = true,
                            Name = "خدماتی – حقیقی"
                        },
                        new
                        {
                            Id = (byte)6,
                            IsActive = true,
                            Name = "خدماتی حقوقی"
                        },
                        new
                        {
                            Id = (byte)7,
                            IsActive = false,
                            Name = "بیکار – خانه دار – محصل"
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("استان");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام استان");

                    b.HasKey("Id");

                    b.ToTable("Province", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Code = "",
                            Name = "نامشخص"
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Wallets.WithdrawalFromWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("برداشت از کیف پول مشتری");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("پاسخ سرویس");

                    b.Property<string>("ActionMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شرح پاسخ");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("مبلغ درخواستی تراکنش");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کانال درخواست");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شرح تراکنش");

                    b.Property<string>("DestinationAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("یوزر آیدی حساب مقصد");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شناسه دستگاه");

                    b.Property<string>("ErrorExMessage")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("سایر خطاها");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نوع تراکنش");

                    b.Property<string>("HostRrn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("پاسخ به سرویس گیرنده");

                    b.Property<string>("OrganUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("یوزر آیدی سازمان");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("زمان ارسال درخواست");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.Property<string>("SourceAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("یوزر آیدی کاربر مبدا");

                    b.Property<string>("TraceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UseDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان استفاده از مبلغ");

                    b.Property<bool>("Used")
                        .HasColumnType("bit")
                        .HasComment("مبلغ کسر شده استفاده شد؟");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("WithdrawalFromWallet", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatBouncedChequeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("اطلاعات چک برگشتی");

                    b.Property<int>("Amount")
                        .HasColumnType("int")
                        .HasComment("مبلغ چک");

                    b.Property<int>("BankCode")
                        .HasColumnType("int")
                        .HasComment("کد بانک");

                    b.Property<int>("BouncedAmount")
                        .HasColumnType("int")
                        .HasComment("مبلغ برگشتی");

                    b.Property<string>("BouncedBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام شعبه برگشت زننده");

                    b.Property<string>("BouncedDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("تاریخ صدور (ارسال) برگشت");

                    b.Property<string>("BranchBounced")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کد شعبه برگشت زننده");

                    b.Property<string>("BranchOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کد شعبه افتتاح کننده");

                    b.Property<int>("ChannelKind")
                        .HasColumnType("int")
                        .HasComment("نحوه ارائه چک");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("کد ارز");

                    b.Property<decimal>("CurrencyRate")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("نرخ ارز");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int")
                        .HasComment("نوع مشتری");

                    b.Property<string>("DeadlineDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("تاریخ سررسید چک");

                    b.Property<string>("Iban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شماره شباي حساب");

                    b.Property<int>("IdCheque")
                        .HasColumnType("int")
                        .HasComment("کد رهگیري چک");

                    b.Property<string>("OriginBranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام شعبه افتتاح کننده");

                    b.Property<Guid>("SamatChequeInquiryRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("سریال چک");

                    b.HasKey("Id");

                    b.HasIndex("SamatChequeInquiryRequestId");

                    b.ToTable("SamatBouncedChequeItem", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeBouncedReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("دلایل برگشت سمات");

                    b.Property<int>("Int")
                        .HasColumnType("int")
                        .HasComment("Reason of bounce as int");

                    b.Property<string>("IntDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Reason of bounce description");

                    b.Property<Guid>("SamatBouncedChequeItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SamatBouncedChequeItemId");

                    b.ToTable("SamatChequeBouncedReason", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeInquiryRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("استعلام چک سمات");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Response code of service");

                    b.Property<string>("ErrorExMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("خطای سیستمی");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int")
                        .HasComment("1: haghighi 2: hoghughi 3: haghighi atba 4: hoghughi atba");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان استعلام");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("SamatChequeInquiryRequest", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("استعلام تسهیلات سمات");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Response code of service");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateEstlm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorExMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("خطای سیستمی");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasError")
                        .HasColumnType("bit");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.Property<string>("ShenaseEstlm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShenaseRes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SumAmBedehiKol")
                        .HasColumnType("int");

                    b.Property<int>("SumAmBenefit")
                        .HasColumnType("int");

                    b.Property<int>("SumAmDirkard")
                        .HasColumnType("int");

                    b.Property<int>("SumAmEltezam")
                        .HasColumnType("int");

                    b.Property<int>("SumAmMashkuk")
                        .HasColumnType("int");

                    b.Property<int>("SumAmMoavagh")
                        .HasColumnType("int");

                    b.Property<int>("SumAmOriginal")
                        .HasColumnType("int");

                    b.Property<int>("SumAmSarResid")
                        .HasColumnType("int");

                    b.Property<int>("SumAmSukht")
                        .HasColumnType("int");

                    b.Property<int>("SumAmTahod")
                        .HasColumnType("int");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("SamatLoanInquiryRequest", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequestItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("استعلام تسهیلات سمات ریز");

                    b.Property<string>("AdamSabtSanadEntezami")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmBedehiKol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmBenefit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmDirkard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmEltezam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmMashkuk")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmMoavagh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmOriginal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmSarResid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmSukht")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmTahod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArzCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DasteBandi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateEstehal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSarResid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estehal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HadafAzDaryaft")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainIdNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainLgId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceCdMasraf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestNum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequstType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RsrcTamin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SamatLoanInquiryRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShobeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShobeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SamatLoanInquiryRequestId");

                    b.ToTable("SamatLoanInquiryRequestItem", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint")
                        .HasComment("نوع حساب");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("شخص");

                    b.Property<byte>("RequestStateType")
                        .HasColumnType("tinyint")
                        .HasComment("آخرین وضعیت (مرحله) در خواست");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestAccountTypeSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("تنظیماتی که برای هر درخواست افتتاح حساب است");

                    b.Property<short>("AccountTypeSettingId")
                        .HasColumnType("smallint")
                        .HasComment("تنظیمات هر نوع حساب");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeSettingId");

                    b.ToTable("RequestAccountTypeSetting", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestDigitalSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("امضای دیجیتال هر درخواست");

                    b.Property<string>("FileNameInDms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام فایل در سیستم مدیریت فایل");

                    b.Property<string>("FinalDigest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("گواهی پایانی");

                    b.Property<string>("FirstDigest")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("گواهی نخست");

                    b.Property<bool>("PdfGenerated")
                        .HasColumnType("bit")
                        .HasComment("فایل از روی داده های کاربر درست و بایگانی شد");

                    b.Property<bool>("PdfSignedByBank")
                        .HasColumnType("bit")
                        .HasComment("فایل بوسیله ی بانک امضاء شد؟");

                    b.Property<string>("RootCertification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("گواهی ریشه");

                    b.Property<string>("SignGeneratedByApp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("گواهی تولید شده بوسیله ی برنامه جانبی");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("تاریخ اعمال شدن امضاء");

                    b.Property<byte[]>("TempPdfFile")
                        .HasColumnType("varbinary(max)")
                        .HasComment("فایل تولید شده تا امضای طرفین");

                    b.HasKey("Id");

                    b.ToTable("RequestDigitalSignature", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestDigitalSignatureLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("خطاهای امضای دیجیتال هر درخواست");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("متن خطا");

                    b.Property<Guid>("RequestDigitalSignatureId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("امضای دیجیتال هر درخواست");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان وقوع خطا");

                    b.HasKey("Id");

                    b.HasIndex("RequestDigitalSignatureId");

                    b.ToTable("RequestDigitalSignatureLog", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestRealSignature", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("بایگانی پاراف خیس");

                    b.Property<string>("ArchiveError")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نتیجه ی بایگانی");

                    b.Property<bool>("SignatureArchived")
                        .HasColumnType("bit")
                        .HasComment("آیا پاراف بدرستی بایگانی شد؟");

                    b.Property<string>("SignatureFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Signature file name in minIo");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان ارسال پاراف");

                    b.HasKey("Id");

                    b.ToTable("RequestRealSignature", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestRealSignatureToBank", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ارسال پاراف خیس به بانک");

                    b.Property<string>("SendToBankMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نتیجه ی ارسال پاراف");

                    b.Property<bool>("SignatureSentToBank")
                        .HasColumnType("bit")
                        .HasComment("آیا پاراف برای بانک بدرستی ارسال شد؟");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان ارسال پاراف");

                    b.HasKey("Id");

                    b.ToTable("RequestRealSignatureToBank", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestStateLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("لاگ تغییر وضعیت درخواست از مرحله ای به مرحله ی دیگر");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("شناسه ی درخواست");

                    b.Property<byte>("RequestState")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("SysDate")
                        .HasColumnType("datetime2")
                        .HasComment("زمان ثبت رکورد");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestStateLog", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.LegalPerson", b =>
                {
                    b.HasBaseType("OpenAccount.Entities.PersonData.Person");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام تجاری");

                    b.Property<byte>("CompanyType")
                        .HasColumnType("tinyint")
                        .HasComment("نوع شرکت");

                    b.Property<string>("EconomicNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شماره اقتصادی");

                    b.Property<string>("RegisterNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("شماره ثبت");

                    b.ToTable("LegalPerson", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.RealPerson", b =>
                {
                    b.HasBaseType("OpenAccount.Entities.PersonData.Person");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام خانوادگی");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام پدر");

                    b.Property<bool>("IsMale")
                        .HasColumnType("bit")
                        .HasComment("جنسیت");

                    b.Property<string>("LatinFamily")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("نام خانوادگی لاتین");

                    b.ToTable("RealPerson", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.LegalPersonInfo", b =>
                {
                    b.HasBaseType("OpenAccount.Entities.PersonData.PersonInfo");

                    b.Property<Guid>("LegalPersonid")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("شخص حقوقی");

                    b.HasIndex("LegalPersonid");

                    b.ToTable("LegalPersonInfo", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.RealPersonInfo", b =>
                {
                    b.HasBaseType("OpenAccount.Entities.PersonData.PersonInfo");

                    b.Property<string>("BirthPlaceAreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("محل تولد");

                    b.Property<string>("BirthPlaceOfficeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("محل صدور");

                    b.Property<byte?>("EducationId")
                        .HasColumnType("tinyint")
                        .HasComment("تحصیلات");

                    b.Property<bool>("IsDead")
                        .HasColumnType("bit")
                        .HasComment("شخص مرده است؟");

                    b.Property<int?>("JobId")
                        .HasColumnType("int")
                        .HasComment("شغل");

                    b.Property<Guid>("RealPersonid")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("شخص حقیقی");

                    b.Property<string>("SocialIdentityExtensionSeries")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("سری حرفی سریال شناسنامه");

                    b.Property<long>("SocialIdentityNumber")
                        .HasColumnType("bigint")
                        .HasComment("شماره شناسنامه");

                    b.Property<int>("SocialIdentitySeries")
                        .HasColumnType("int")
                        .HasComment("سریال شناسنامه");

                    b.HasIndex("EducationId");

                    b.HasIndex("JobId");

                    b.HasIndex("RealPersonid");

                    b.ToTable("RealPersonInfo", (string)null);
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Exceptions.StartException", b =>
                {
                    b.HasBaseType("OpenAccount.Entities.Publics.Exceptions.EntityException");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("درخواست افتتاح حساب");

                    b.HasIndex("RequestId");

                    b.ToTable("StartException", null, t =>
                        {
                            t.HasComment("خطا های مرحله ی اولیه");
                        });
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.UserAccount", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithOne("UserAccount")
                        .HasForeignKey("OpenAccount.Entities.Accounts.UserAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.UserAccountLog", b =>
                {
                    b.HasOne("OpenAccount.Entities.Accounts.UserAccount", "UserAccount")
                        .WithMany("UserAccountLogs")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.WalletStatus", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany("WalletStatuses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.Person", b =>
                {
                    b.HasOne("OpenAccount.Entities.Publics.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Address", b =>
                {
                    b.HasOne("OpenAccount.Entities.PersonData.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.City", b =>
                {
                    b.HasOne("OpenAccount.Entities.Publics.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Job", b =>
                {
                    b.HasOne("OpenAccount.Entities.Publics.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Wallets.WithdrawalFromWallet", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany("WithdrawalFromWallets")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatBouncedChequeItem", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeInquiryRequest", null)
                        .WithMany("SamatBouncedChequeItems")
                        .HasForeignKey("SamatChequeInquiryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeBouncedReason", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.InqueryCheque.SamatBouncedChequeItem", null)
                        .WithMany("BouncedReasons")
                        .HasForeignKey("SamatBouncedChequeItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeInquiryRequest", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany("SamatChequeInquiryRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequest", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequestItem", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequest", null)
                        .WithMany("EstelamAsliRows")
                        .HasForeignKey("SamatLoanInquiryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.Request", b =>
                {
                    b.HasOne("OpenAccount.Entities.PersonData.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestAccountTypeSetting", b =>
                {
                    b.HasOne("OpenAccount.Entities.Accounts.AccountTypeSetting", "AccountTypeSetting")
                        .WithMany("RequestAccountTypeSettings")
                        .HasForeignKey("AccountTypeSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithOne("RequestAccountTypeSetting")
                        .HasForeignKey("OpenAccount.Entities.Requests.RequestAccountTypeSetting", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountTypeSetting");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestDigitalSignature", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithOne("RequestDigitalSignature")
                        .HasForeignKey("OpenAccount.Entities.Requests.RequestDigitalSignature", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestDigitalSignatureLog", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.RequestDigitalSignature", "RequestDigitalSignature")
                        .WithMany("RequestDigitalSignatureLogs")
                        .HasForeignKey("RequestDigitalSignatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestDigitalSignature");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestRealSignature", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithOne("RequestRealSignature")
                        .HasForeignKey("OpenAccount.Entities.Requests.RequestRealSignature", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestRealSignatureToBank", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithOne("RequestRealSignatureToBank")
                        .HasForeignKey("OpenAccount.Entities.Requests.RequestRealSignatureToBank", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestStateLog", b =>
                {
                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany("RequestStateLogs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.LegalPerson", b =>
                {
                    b.HasOne("OpenAccount.Entities.PersonData.Person", null)
                        .WithOne()
                        .HasForeignKey("OpenAccount.Entities.PersonData.LegalPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.RealPerson", b =>
                {
                    b.HasOne("OpenAccount.Entities.PersonData.Person", null)
                        .WithOne()
                        .HasForeignKey("OpenAccount.Entities.PersonData.RealPerson", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.LegalPersonInfo", b =>
                {
                    b.HasOne("OpenAccount.Entities.PersonData.PersonInfo", null)
                        .WithOne()
                        .HasForeignKey("OpenAccount.Entities.PersonData.LegalPersonInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenAccount.Entities.PersonData.LegalPerson", "LegalPerson")
                        .WithMany("LegalPersonInfos")
                        .HasForeignKey("LegalPersonid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LegalPerson");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.RealPersonInfo", b =>
                {
                    b.HasOne("OpenAccount.Entities.Publics.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId");

                    b.HasOne("OpenAccount.Entities.PersonData.PersonInfo", null)
                        .WithOne()
                        .HasForeignKey("OpenAccount.Entities.PersonData.RealPersonInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenAccount.Entities.Publics.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("OpenAccount.Entities.PersonData.RealPerson", "RealPerson")
                        .WithMany("RealPersonInfos")
                        .HasForeignKey("RealPersonid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Job");

                    b.Navigation("RealPerson");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Exceptions.StartException", b =>
                {
                    b.HasOne("OpenAccount.Entities.Publics.Exceptions.EntityException", null)
                        .WithOne()
                        .HasForeignKey("OpenAccount.Entities.Publics.Exceptions.StartException", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OpenAccount.Entities.Requests.Request", "Request")
                        .WithMany("StartExceptions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.AccountTypeSetting", b =>
                {
                    b.Navigation("RequestAccountTypeSettings");
                });

            modelBuilder.Entity("OpenAccount.Entities.Accounts.UserAccount", b =>
                {
                    b.Navigation("UserAccountLogs");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.Person", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.JobCategory", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("OpenAccount.Entities.Publics.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatBouncedChequeItem", b =>
                {
                    b.Navigation("BouncedReasons");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryCheque.SamatChequeInquiryRequest", b =>
                {
                    b.Navigation("SamatBouncedChequeItems");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.InqueryLoan.SamatLoanInquiryRequest", b =>
                {
                    b.Navigation("EstelamAsliRows");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.Request", b =>
                {
                    b.Navigation("RequestAccountTypeSetting");

                    b.Navigation("RequestDigitalSignature");

                    b.Navigation("RequestRealSignature");

                    b.Navigation("RequestRealSignatureToBank");

                    b.Navigation("RequestStateLogs");

                    b.Navigation("SamatChequeInquiryRequests");

                    b.Navigation("StartExceptions");

                    b.Navigation("UserAccount");

                    b.Navigation("WalletStatuses");

                    b.Navigation("WithdrawalFromWallets");
                });

            modelBuilder.Entity("OpenAccount.Entities.Requests.RequestDigitalSignature", b =>
                {
                    b.Navigation("RequestDigitalSignatureLogs");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.LegalPerson", b =>
                {
                    b.Navigation("LegalPersonInfos");
                });

            modelBuilder.Entity("OpenAccount.Entities.PersonData.RealPerson", b =>
                {
                    b.Navigation("RealPersonInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
